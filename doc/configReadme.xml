<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce and database Account Aggregation</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
I want to aggregate accounts from Salesforce and database instances and compare them to see which accounts can only be found in one of the two and which accounts are in both instances. 

This template has these features:

- Generates the result in a CSV report sent by email to addresses you configure.
- Extracts data from two systems, aggregates the data, compares the values of fields for the objects, and generates a report on the differences. 
- Gets two accounts, one from Salesforce and other from a database instance. The template then compares by the name on the accounts, and generates a CSV file that shows accounts in A, accounts in B, and accounts in A and B. The report is emailed to a configured group of email addresses.
		</section>
		<section id="considerations">
<![CDATA[
To make this template run, there are certain preconditions that must be considered. All of them deal with the preparations in both, that must be made in order for all to run smoothly. Failing to do so could lead to unexpected behavior of the template.

**Note:** This template illustrates the aggregation use case between SalesForce and a database, thus it requires a database instance to work.
The template comes package with a MySQL script to create the DB table that uses. 
It is your responsibility to use that script to create the table in an available schema and change the configuration accordingly.
The SQL script file can be found in src/main/resources/sfdc2jdbc.sql.

This template is customized for MySQL. To use it with different SQL implementation:

* Update the SQL script dialect to the desired one.
* Replace MySQL driver library dependency to desired one in the pom.xml file.
* Update the database connector configuration.
* Update the database properties in the `mule.*.properties` file.
]]>
		</section>
		<section id="running_on_cloudhub">
<![CDATA[
After your application is running, if you chose as a domain name `sfdc2db-account-aggregation` to trigger the use case, browse to  `http://sfdc2db-account-aggregation.cloudhub.io/generatereport`, which invokes the application and sends the report to the email addresses you configured.
]]>
		</section>
		<section id="running_on_standalone">
<![CDATA[
After this, to trigger the use case, browse to the HTTP endpoint with the port you configured in your file, for example `9090`, then browse to `http://localhost:9090/generatereport`. This creates a CSV report and sends it to the email addresses you set.
]]>
		</section>
		<section id="application_configuration">
		<![CDATA[
#### HTTP Connector Configuration

+ http.port `9090` 

#### SalesForce Connector Configuration

+ sfdc.username `bob.dylan@org`
+ sfdc.password `DylanPassword123`
+ sfdc.securityToken `avsfwCUl7apQs56Xq2AKi3X`

#### Database Connector Configuration

+ db.host `localhost`
+ db.port `3306`
+ db.user `joan.baez`
+ db.password `JoanBaez456`
+ db.databasename `template-sfdc2db-user-broadcast`

#### SMTP Services Configuration

+ smtp.host `smtp.example.com`
+ smtp.port `587`
+ smtp.user `exampleuser@example.com`
+ smtp.password `ExamplePassword456`

#### Email Details

+ mail.from `exampleuser@example.com`
+ mail.to `woody.guthrie@example.com`
+ mail.subject `Accounts Report`
+ mail.body `Find attached your Accounts Report`
+ attachment.name `accounts_report.csv`
]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Salesforce imposes limits on the number of API calls that can be made. However, we make an API call to Salesforce only once during aggregation. 
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
The file where you find the endpoint to start the aggregation. This template uses an HTTP Listener to trigger the use case.

$H$H# Trigger Flow
**HTTP Listener** - Start Report Generation
+ `${http.port}` is set as a property to be defined either on a property file or in CloudHub environment variables.
+ The path configured by default is `generatereport` and you are free to change for the one you prefer.
+ The host name for all endpoints in your CloudHub configuration should be defined as `localhost`. CloudHub routes requests from your application domain URL to the endpoint.

]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
The functional aspect of the template is implemented in this XML directed by a flow responsible for conducting the aggregation of data, comparing records, and finally formating the output, in this case as a report.

Using the Scatter-Gather component, we query the data in different systems. After that the aggregation implements a DataWeave 2 script using the Transform component.

Aggregated results are sorted by:

1. Accounts only in Salesforce.
2. Accounts only in the database.
3. Accounts in both Salesforce and the database.

These are transformed to a CSV format report. The final report is sent to the email addresses you configured in the mule.*.properties file.
]]>
		</section>
	</sections>
</configuration>
